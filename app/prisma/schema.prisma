// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Room {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    ownerId   String   @db.ObjectId
    owner     User     @relation(fields: [ownerId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    messages Message[]
}

type AttachmentFile {
    name        String
    contentType String
    uri         String
}

model Message {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    content String
    ownerId String @db.ObjectId
    roomId  String @db.ObjectId

    attachments AttachmentFile[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    owner User @relation(fields: [ownerId], references: [id])
    room  Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime

    user User @relation(fields: [userId], references: [id])
}

model User {
    id                String    @id @default(auto()) @map("_id") @db.ObjectId
    name              String?
    email             String?   @unique
    emailVerified     DateTime?
    image             String?
    username          String    @unique @default(nanoid(8))
    emailChange       String?
    emailChangeToken  String?
    emailChangeSentAt DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    accounts Account[]
    sessions Session[]
    rooms    Room[]
    messages Message[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
