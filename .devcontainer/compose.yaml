version: "3.7"

services:
  caddy:
    build:
      context: ../caddy
      dockerfile: Dockerfile
      target: dev-container
    volumes:
      - caddy_data:/data/caddy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 5s
      timeout: 1s
      retries: 3
    ports:
      - "80:80"
    depends_on:
      - app
      - seaweedfs-s3
      - ws-server

  mongodb:
    image: bitnami/mongodb:6.0
    environment:
      MONGODB_REPLICA_SET_MODE: primary
      MONGODB_ADVERTISED_HOSTNAME: mongodb
      MONGODB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGODB_ROOT_USER: ${MONGO_USER}
      MONGODB_REPLICA_SET_KEY: ${MONGO_REPLICA_SET_KEY}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/bitnami/mongodb
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build:
      context: ../app
      dockerfile: Dockerfile
      target: dev-container
      args:
        NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL}
        # S3 Public Information
        NEXT_PUBLIC_S3_ENDPOINT: ${NEXT_PUBLIC_S3_ENDPOINT}
        NEXT_PUBLIC_S3_AVATAR_BUCKET: ${NEXT_PUBLIC_S3_AVATAR_BUCKET}
        NEXT_PUBLIC_S3_MEDIA_BUCKET: ${NEXT_PUBLIC_S3_MEDIA_BUCKET}

        # Websocket Information
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
    working_dir: /workspace/app
    volumes:
      - ../:/workspace:cached
      - /workspace/app/node_modules
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      # Prisma
      DATABASE_URL: ${DATABASE_URL}
      # Next Auth
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_URL_INTERNAL: ${NEXTAUTH_URL_INTERNAL}
      # Next Auth Google Provider
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      # Next Auth Email Provider
      EMAIL_SERVER: ${EMAIL_SERVER}
      EMAIL_FROM: ${EMAIL_FROM}
      # S3 Configuration
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_END_POINT: ${S3_END_POINT}
      S3_AVATAR_BUCKET_NAME: ${S3_AVATAR_BUCKET_NAME}
      S3_MEDIA_BUCKET_NAME: ${S3_MEDIA_BUCKET_NAME}
      S3_REGION: ${S3_REGION}

      # RabbitMQ Configuration
      RABBITMQ_URL: ${RABBITMQ_URL}
      RABBITMQ_QUEUE_NAME: ${RABBITMQ_QUEUE_NAME}
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - seaweedfs-s3
      - ws-server
      - rabbitmq

  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - "1025:1025"
      - "8025:8025"
    healthcheck:
      test: ["CMD", "echo | telnet localhost 8025"]
      interval: 30s
      timeout: 10s
      retries: 3

  ws-server:
    build:
      context: ../ws-server
      dockerfile: Dockerfile
      target: dev-container
    working_dir: /workspace/ws-server
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      RABBITMQ_URL: ${RABBITMQ_URL}
      RABBITMQ_QUEUE_NAME: ${RABBITMQ_QUEUE_NAME}
      TOKEN_VERIFY_URL: ${TOKEN_VERIFY_URL}
    depends_on:
      - rabbitmq

  rabbitmq:
    image: bitnami/rabbitmq:3.12
    environment:
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  seaweedfs-master:
    image: chrislusf/seaweedfs:3.56
    ports:
      - "9333:9333"
    command: "master -ip=seaweedfs-master"
    # master servers store data by default to /data
    volumes:
      - seaweedfs_master_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9333/dir/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  seaweedfs-volume:
    image: chrislusf/seaweedfs:3.56
    ports:
      - "8080:8080"
    depends_on:
      - seaweedfs-master
    command: "volume -max=50 -mserver=seaweedfs-master:9333 -port=8080 -ip=seaweedfs-volume"
    # volume servers store data by default to /data
    volumes:
      - seaweedfs_volume_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  seaweedfs-filer:
    image: chrislusf/seaweedfs:3.56
    ports:
      - "8888:8888"
    command: "filer -master=seaweedfs-master:9333 -ip.bind=0.0.0.0"
    volumes:
      - seaweedfs_filer_data:/data
    depends_on:
      - seaweedfs-master
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  seaweedfs-s3:
    build:
      context: ../weed-s3
      dockerfile: Dockerfile
    # we are overriding the entrypoint, so we need to prefix our command with `weed`.
    # this won't be necessary if we are using the default entrypoint.
    command: "weed s3 -filer=seaweedfs-filer:8888 -port=8333 -ip.bind=0.0.0.0 -config=/config.json"
    environment:
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
    ports:
      - "8333:8333"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8333/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - seaweedfs-master
      - seaweedfs-filer

volumes:
  seaweedfs_master_data:
    driver: local
  seaweedfs_filer_data:
    driver: local
  seaweedfs_volume_data:
    driver: local
  caddy_data:
    driver: local
  mongodb_data:
    driver: local
